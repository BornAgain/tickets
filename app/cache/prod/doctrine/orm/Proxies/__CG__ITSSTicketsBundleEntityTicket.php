<?php

namespace Proxies\__CG__\ITSS\TicketsBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Ticket extends \ITSS\TicketsBundle\Entity\Ticket implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'id', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'title', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'dateCreate', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'dateEdit', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'content', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'projet', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'comment', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'user');
        }

        return array('__isInitialized__', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'id', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'title', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'dateCreate', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'dateEdit', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'content', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'projet', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'comment', '' . "\0" . 'ITSS\\TicketsBundle\\Entity\\Ticket' . "\0" . 'user');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Ticket $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreate($dateCreate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreate', array($dateCreate));

        return parent::setDateCreate($dateCreate);
    }

    /**
     * {@inheritDoc}
     */
    public function updateDateCreate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateDateCreate', array());

        return parent::updateDateCreate();
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreate', array());

        return parent::getDateCreate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateEdit($dateEdit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateEdit', array($dateEdit));

        return parent::setDateEdit($dateEdit);
    }

    /**
     * {@inheritDoc}
     */
    public function updateDateEdit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateDateEdit', array());

        return parent::updateDateEdit();
    }

    /**
     * {@inheritDoc}
     */
    public function getDateEdit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateEdit', array());

        return parent::getDateEdit();
    }

    /**
     * {@inheritDoc}
     */
    public function setContent($content)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContent', array($content));

        return parent::setContent($content);
    }

    /**
     * {@inheritDoc}
     */
    public function getContent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContent', array());

        return parent::getContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setProjet(\ITSS\TicketsBundle\Entity\Projet $projet)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProjet', array($projet));

        return parent::setProjet($projet);
    }

    /**
     * {@inheritDoc}
     */
    public function getProjet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProjet', array());

        return parent::getProjet();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function addComment(\ITSS\TicketsBundle\Entity\Comment $comment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComment', array($comment));

        return parent::addComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function removeComment(\ITSS\TicketsBundle\Entity\Comment $comment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeComment', array($comment));

        return parent::removeComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function getComment()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComment', array());

        return parent::getComment();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\ITSS\UserBundle\Entity\User $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

}
